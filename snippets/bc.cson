# Template for BoundaryConditions

'.source.c':
  'MOOSE nodal boundary condition':
    'prefix': 'nodalbc-h'
    'body': """
    #ifndef ${1}_H
    #define ${1}_H

    #include "NodalBC.h"

    class ${2};

    template<>
    InputParameters validParams<${2}>();

    /**
     *
     */
    class ${2} : public NodalBC
    {
    public:
      ${2}(const InputParameters & parameters);

    protected:
      virtual Real computeQpResidual();

    };

    #endif // ${1}_H
    """

  'MOOSE integrated boundary condition':
    'prefix': 'integratedbc-h'
    'body': """
    #ifndef ${1}_H
    #define ${1}_H

    #include "IntegratedBC.h"

    class ${2};

    template<>
    InputParameters validParams<${2}>();

    /**
     *
     */
    class ${2} : public IntegratedBC
    {
    public:
      ${2}(const InputParameters & parameters);

    protected:
      virtual Real computeQpResidual();
      virtual Real computeQpJacobian();
    };

    #endif // ${1}_H
    """

'.source.cpp':
  'MOOSE nodal boundary condition':
    'prefix': 'nodalbc-c'
    'body': """
    #include "${1}.h"

    template<>
    InputParameters validParams<${1}>()
    {
      InputParameters params = validParams<NodalBC>();
      return params;
    }

    ${1}::${1}(const InputParameters & parameters) : NodalBC(parameters)
    {
    }

    Real
    ${1}::computeQpResidual()
    {
    }
    """

  'MOOSE integrated boundary condition':
    'prefix': 'integratedbc-c'
    'body': """
    #include "${1}.h"

    template<>
    InputParameters validParams<${1}>()
    {
      InputParameters params = validParams<IntegratedBC>();
      return params;
    }

    ${1}::${1}(const InputParameters & parameters) : IntegratedBC(parameters)
    {
    }

    Real
    ${1}::computeQpResidual()
    {
    }

    Real
    ${1}::computeQpJacobian()
    {
      return 0;
    }
    """
