'scopeName': 'input.moose'
'fileTypes': [
  'i'
]
'foldingStartMarker': '(^\\s*/\\*|(\\{|\\[|\\()\\s*$)'
'foldingStopMarker': '(\\*/|^\\s*(\\}|\\]|\\)))'
'name': 'MOOSE Input'
'patterns': [
  {
    'include': '#line_comment'
  }
  {
    'include': '#constants'
  }
  {
    'match': '(\\[)(Mesh|Kernels|AuxKernels|ScalarKernels|AuxScalarKernels|Variables|AuxVariables|Materials|Postprocessors|BCs|ICs|Executioner|Outputs|Problem|Debug|Preconditioning|UserObjects|Functions)(\\])'
    'captures':
      '1':
        'name': 'keyword.operator.moose'
      '2':
        'name': 'keyword.control.moose'
      '3':
        'name': 'keyword.operator.moose'
  }
  {
    'match': '(\\[\\.\\/)(TimeStepper|Periodic|InitialCondition)(\\])'
    'captures':
      '1':
        'name': 'keyword.operator.moose'
      '2':
        'name': 'keyword.control.moose'
      '3':
        'name': 'keyword.operator.moose'
  }
  {
    'match': '(\\[\\.*/*)(.*)(\\])'
    'captures':
      '1':
        'name': 'keyword.operator.moose'
      '2':
        'name': 'support.function.moose'
      '3':
        'name': 'keyword.operator.moose'
  }
  {
    'match': '\\b(type)\\s*(=)\\s*(.*)'
    'captures':
      '1':
        'name': 'keyword.control.moose'
      '2':
        'name': 'keyword.operator.moose'
      '3':
        'name': 'entity.name.function.moose'
  }
  {
    'match': '\\[(\\.+/)\\]'
    'captures':
      '1':
        'name': 'keyword.operator.moose'
  }
  {
    'match': '(\\[\\])'
    'captures':
      '1':
        'name': 'keyword.operator.moose'
  }
  {
    'match': '\\b(\\d*\\.\\d+)\\b'
    'captures':
      '1':
        'name': 'constant.numeric.moose'
  }
  {
    'match': '\\b(\\d+e-{0,1}\\d+)\\b'
    'captures':
      '1':
        'name': 'constant.numeric.moose'
  }
  {
    'match': '\\b(\\d*\\.\\d+e-{0,1}\\d+)\\b'
    'captures':
      '1':
        'name': 'constant.numeric.moose'
  }
  {
    'match': '\\b(\\d+)[\\s\\n]'
    'captures':
      '1':
        'name': 'constant.numeric.moose'
  }
  {
    'begin': '(?x)^\\s*\n\t\t\t\t\t(node|class)\\s+\n\t\t\t\t\t((?:[-_A-Za-z0-9".]+::)*[-_A-Za-z0-9".]+)\\s* # identifier'
    'captures':
      '1':
        'name': 'storage.type.puppet'
      '2':
        'name': 'entity.name.type.class.puppet'
    'end': '(?={)'
    'name': 'meta.definition.class.puppet'
    'patterns': [
      {
        'begin': '\\b(inherits)\\b\\s+'
        'captures':
          '1':
            'name': 'storage.modifier.puppet'
        'end': '(?={)'
        'name': 'meta.definition.class.inherits.puppet'
        'patterns': [
          {
            'match': '\\b((?:[-_A-Za-z0-9".]+::)*[-_A-Za-z0-9".]+)\\b'
            'name': 'support.type.puppet'
          }
        ]
      }
    ]
  }
  {
    'captures':
      '1':
        'name': 'storage.type.puppet'
      '2':
        'name': 'entity.name.section.puppet'
    'match': '^\\s*(\\w+)\\s*{\\s*([\'"].+[\'"]):'
    'name': 'meta.definition.resource.puppet'
  }
  {
    'match': '\\b(case|if|else)(?!::)\\b'
    'name': 'keyword.control.puppet'
  }
  {
    'match': '((\\$?)"?[a-zA-Z_\\x{7f}-\\x{ff}][a-zA-Z0-9_\\x{7f}-\\x{ff}]*"?):(?=\\s+|$)'
    'name': 'entity.name.section.puppet'
  }
  {
    'include': '#strings'
  }
  {
    'include': '#variable'
  }
  {
    'begin': '(?i)\\b(import|include)\\b\\s*'
    'beginCaptures':
      '1':
        'name': 'keyword.control.import.include.puppet'
    'end': '(?=\\s|$)'
    'name': 'meta.include.puppet'
  }
]
'repository':
  'constants':
    'patterns': [
      {
        'match': '(?i)\\b(false|true|CONSTANT|FIRST|SECOND|THIRD|MONOMIAL|LAGRANGE|HERMITE)\\b'
        'name': 'constant.language.moose'
      }
    ]
  'escaped_char':
    'match': '\\\\.'
    'name': 'constant.character.escape.puppet'
  'line_comment':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'comment.line.number-sign.puppet'
          '2':
            'name': 'punctuation.definition.comment.puppet'
        'match': '^((#).*$\\n?)'
        'name': 'meta.comment.full-line.puppet'
      }
      {
        'captures':
          '1':
            'name': 'punctuation.definition.comment.puppet'
        'match': '(#).*$\\n?'
        'name': 'comment.line.number-sign.puppet'
      }
    ]
  'parameter-default-types':
    'patterns': [
      {
        'include': '#strings'
      }
      {
        'include': '#numbers'
      }
      {
        'include': '#variables'
      }
      {
        'match': '='
        'name': 'keyword.operator.assignment.puppet'
      }
      {
        'begin': '(\\[)'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.array.begin.puppet'
        'end': '\\]'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.array.end.puppet'
        'name': 'meta.array.puppet'
        'patterns': [
          {
            'include': '#parameter-default-types'
          }
        ]
      }
      {
        'include': '#constants'
      }
    ]
  'single-quoted-string':
    'begin': '\''
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.puppet'
    'end': '\''
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.puppet'
    'name': 'string.quoted.single.puppet'
    'patterns': [
      {
        'include': '#escaped_char'
      }
    ]
  'strings':
    'patterns': [
      {
        'include': '#single-quoted-string'
      }
    ]
  'variable':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'punctuation.definition.variable.puppet'
        'match': '(\\$)([a-zA-Zx7f-xff\\$]|::)([a-zA-Z0-9_x7f-xff\\$]|::)*\\b'
        'name': 'variable.other.readwrite.global.puppet'
      }
      {
        'captures':
          '1':
            'name': 'punctuation.definition.variable.puppet'
          '2':
            'name': 'punctuation.definition.variable.puppet'
        'match': '(\\$\\{)(?:[a-zA-Zx7f-xff\\$]|::)(?:[a-zA-Z0-9_x7f-xff\\$]|::)*(\\})'
        'name': 'variable.other.readwrite.global.puppet'
      }
    ]
